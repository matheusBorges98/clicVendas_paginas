'use strict';angular.module('datatables.factory',[]).factory('DTOptionsBuilder',dtOptionsBuilder).factory('DTColumnBuilder',dtColumnBuilder).factory('DTColumnDefBuilder',dtColumnDefBuilder).factory('DTLoadingTemplate',dtLoadingTemplate);function dtOptionsBuilder(){var DTOptions={withOption:function(key,value){if(angular.isString(key)){this[key]=value;}
return this;},withSource:function(ajax){this.ajax=ajax;return this;},withDataProp:function(sAjaxDataProp){this.sAjaxDataProp=sAjaxDataProp;return this;},withFnServerData:function(fn){if(!angular.isFunction(fn)){throw new Error('The parameter must be a function');}
this.fnServerData=fn;return this;},withPaginationType:function(sPaginationType){if(angular.isString(sPaginationType)){this.sPaginationType=sPaginationType;}else{throw new Error('The pagination type must be provided');}
return this;},withLanguage:function(language){this.language=language;return this;},withLanguageSource:function(languageSource){return this.withLanguage({url:languageSource});},withDisplayLength:function(iDisplayLength){this.iDisplayLength=iDisplayLength;return this;},withFnPromise:function(fnPromise){this.fnPromise=fnPromise;return this;},withDOM:function(dom){this.dom=dom;return this;}};return{newOptions:function(){return Object.create(DTOptions);},fromSource:function(ajax){var options=Object.create(DTOptions);options.ajax=ajax;return options;},fromFnPromise:function(fnPromise){var options=Object.create(DTOptions);options.fnPromise=fnPromise;return options;}};}
function dtColumnBuilder(){var DTColumn={withOption:function(key,value){if(angular.isString(key)){this[key]=value;}
return this;},withTitle:function(sTitle){this.sTitle=sTitle;return this;},withClass:function(sClass){this.sClass=sClass;return this;},notVisible:function(){this.bVisible=false;return this;},notSortable:function(){this.bSortable=false;return this;},renderWith:function(mRender){this.mRender=mRender;return this;}};return{newColumn:function(mData,sTitle){if(angular.isUndefined(mData)){throw new Error('The parameter "mData" is not defined!');}
var column=Object.create(DTColumn);column.mData=mData;if(angular.isDefined(sTitle)){column.sTitle=sTitle;}
return column;},DTColumn:DTColumn};}
function dtColumnDefBuilder(DTColumnBuilder){return{newColumnDef:function(targets){if(angular.isUndefined(targets)){throw new Error('The parameter "targets" must be defined! See https://datatables.net/reference/option/columnDefs.targets');}
var column=Object.create(DTColumnBuilder.DTColumn);if(angular.isArray(targets)){column.aTargets=targets;}else{column.aTargets=[targets];}
return column;}};}
function dtLoadingTemplate($compile,DTDefaultOptions,DT_LOADING_CLASS){return{compileHtml:function($scope){return $compile(angular.element('<div class="'+DT_LOADING_CLASS+'">'+DTDefaultOptions.loadingTemplate+'</div>'))($scope);},isLoading:function(elem){return elem.hasClass(DT_LOADING_CLASS);}};}